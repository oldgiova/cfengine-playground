#!/var/cfengine/bin/cf-agent --no-lock
#body common control
bundle agent __main__
{
  #bundlesequence => { "self_snap" };
  methods:
    "self_snap";
}

body contain in_shell 
{
  useshell => "true";
} 

#body classes myresults(scope, class_prefix)
#{
#  scope => "$(scope)";
#
#  promise_kept => { "$(class_prefix)_reached",
#                    "$(class_prefix)_kept" };
#
#  promise_repaired => { "$(class_prefix)_reached",
#                        "$(class_prefix)_repaired" };
#
#  repair_failed => { "$(class_prefix)_reached",
#                     "$(class_prefix)_error",
#                     "$(class_prefix)_not_kept",
#                     "$(class_prefix)_failed" };
#
#  repair_denied => { "$(class_prefix)_reached",
#                     "$(class_prefix)_error",
#                     "$(class_prefix)_not_kept",
#                     "$(class_prefix)_denied" };
#
#  repair_timeout => { "$(class_prefix)_reached",
#                      "$(class_prefix)_error",
#                      "$(class_prefix)_not_kept",
#                      "$(class_prefix)_timeout" };
#}


bundle agent self_snap {

  packages:
    debian::
      "update-notifier-common"
        policy => "present",
        comment => "used to check if debian needs update";

  vars: 
    "system_update_command"   
      string => ifelse("redhat","yum upgrade -y",
			"debian","apt-get upgrade -y",
			"yum upgrade -y");

    "system_update_check_command"
      string => ifelse("redhat","yum update && yum check-update > /dev/null 2>&1",
			"debian","apt-get update && /usr/lib/update-notifier/apt-check 2>&1 | grep -v '0;0'",
			"yum update && yum check-update > /dev/null 2>&1");
 
    "system_reboot_command"
      string => ifelse("redhat","systemctl --message=\"CFEngine reboot, will be back in 30 minutes\" reboot",
			"debian","systemctl --message=\"CFEngine reboot, will be back in 30 minutes\" reboot",
			"systemctl --message=\"CFEngine reboot, will be back in 30 minutes\" reboot");
    
  
  classes:
    "maintenance_window"
       #expression => "Thursday.Hr01.Min05_10";
       expression => "Saturday";

    "uptime_greater_than_1_week"
       expression => isgreaterthan( "$(sys.uptime)", 10080 ),
       comment => "We don't care to reboot unless we have been running for at least a week";

    "have_snapshot_less_than_2_hours"
       expression => returnszero( "/opt/nt/have_a_recent_snapshot.sh", useshell ),
       comment => "This script could hit aws api, return 0 when there is a snapshot made within last2 hours."; 

    "no_needs_reboot"
       expression => returnszero( "test ! -f /var/run/reboot-required", useshell ),
       comment => "If returns 0, no need to reboot";

    "up_to_date"
       expression => returnszero( "$(system_update_check_command)", useshell ),
       comment => "If returns 0, the system is up to date";

  commands:
    maintenance_window.!have_snapshot_less_than_2_hours::
      "echo 'INFO - taking snapshot' && /opt/nt/ec2snapshot.sh"
        contain => in_shell;

    maintenance_window.have_snapshot_less_than_2_hours.!up_to_date::
      "$(system_update_command)"
        contain => in_shell;

    maintenance_window.have_snapshot_less_than_2_hours.!no_needs_reboot::
      "$(system_reboot_command)"
        contain => in_shell;
   
    maintenance_window.have_snapshot_less_than_2_hours.uptime_greater_than_1_week::
      "$(system_reboot_command)"
        contain => in_shell;
}


